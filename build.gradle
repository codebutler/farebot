buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven { url 'https://maven.google.com' }
        maven { url 'https://maven.fabric.io/public' }
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.5.0-alpha13'
        classpath 'io.fabric.tools:gradle:1.28.1'
        classpath 'com.squareup.sqldelight:gradle-plugin:1.1.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.3.31"
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.21.0'
}

allprojects {
    tasks.withType(Test).configureEach {
        maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
        if (!project.hasProperty("createReports")) {
            reports.html.required = false
            reports.junitXml.required = false
        }
        forkEvery = 100
    }

    repositories {
        mavenLocal()
        jcenter()
        maven { url "https://maven.google.com" }
        maven { url 'https://maven.fabric.io/public' }
    }
}

apply from: 'dependencies.gradle'

subprojects {
    apply plugin: 'checkstyle'

    dependencies {
        checkstyle libs.checkstyle
    }

    afterEvaluate {project ->
        if (project.name.contains('farebot')) {
            check.dependsOn 'checkstyle'
            task checkstyle(type: Checkstyle) {
                configFile file('config/checkstyle/checkstyle.xml')
                source 'src'
                include '**/*.java'
                exclude '**/gen/**'
                exclude '**/IOUtils.java'
                exclude '**/Charsets.java'
                classpath = files()
            }
            checkstyle {
                ignoreFailures = false
            }
        }
        if (project.hasProperty("android")) {
            android {
                compileSdkVersion vers.compileSdkVersion

                defaultConfig {
                    minSdkVersion vers.minSdkVersion
                    targetSdkVersion vers.targetSdkVersion
                }

                compileOptions {
                    sourceCompatibility JavaVersion.VERSION_1_7
                    targetCompatibility JavaVersion.VERSION_1_7
                }

                lintOptions {
                    abortOnError true
                    disable 'InvalidPackage','MissingTranslation'
                }

                dexOptions {
                    dexInProcess = true
                }
            }
        }
    }
}

dependencyUpdates.resolutionStrategy = {
    componentSelection { rules ->
        rules.all { ComponentSelection selection ->
            boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
                selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
            }
            if (rejected) {
                selection.reject('Release candidate')
            }
        }
    }
}

configurations {
    ktlint
}

dependencies {
    ktlint 'com.github.shyiko:ktlint:0.31.0'
}

task lintKotlin(type: JavaExec) {
    main = "com.github.shyiko.ktlint.Main"
    classpath = configurations.ktlint
    args "*/src/**/*.kt"
}
